name: Initialize project tracking

on:
  - fork
  - workflow_dispatch

permissions:
  issues:   write
  contents: read


env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # Fall 2025 deadlines for milestones (23:59 Toronto --> 03:59 UTC)
  M1_DUE:    "2025-10-13T03:59:59.0Z"
  M2_DUE:    "2025-11-10T03:59:59.0Z"
  FINAL_DUE: "2025-12-05T03:59:59.0Z"
  
jobs:

  init-milestones:
    runs-on: ubuntu-latest
    steps:
      - name: Create Milestone 1
        run: |
          gh api \
            repos/${{ github.repository }}/milestones \
            -f title="Milestone 1" \
            -f state="open" \
            -f description="First Window of Opportunity for feedback" \
            -f due_on="${{ env.M1_DUE }}"

      - name: Create Milestone 2
        run: |
          gh api \
            repos/${{ github.repository }}/milestones \
            -f title="Milestone 2" \
            -f state="open" \
            -f description="Second Window of Opportunity for feedback" \
            -f due_on="${{ env.M2_DUE }}"

      - name: Create Milestone 3
        run: |
          gh api \
            repos/${{ github.repository }}/milestones \
            -f title="Final Delivery" \
            -f state="open" \
            -f description="Delivery of the complete document" \
            -f due_on="${{ env.FINAL_DUE }}"

  get-milestones:
    runs-on: ubuntu-latest
    needs: init-milestones
    outputs:
      milestone1: ${{ steps.lookup.outputs.m1 }}
      milestone2: ${{ steps.lookup.outputs.m2 }}
      milestone3: ${{ steps.lookup.outputs.m3 }}
    steps:
      - name: Lookup milestone IDs
        id: lookup
        run: |
          M1=$(gh api repos/${{ github.repository }}/milestones --jq '.[] | select(.title=="Milestone 1") | .number')
          M2=$(gh api repos/${{ github.repository }}/milestones --jq '.[] | select(.title=="Milestone 2") | .number')
          M3=$(gh api repos/${{ github.repository }}/milestones --jq '.[] | select(.title=="Final Delivery") | .number')

          echo "m1=$M1" >> $GITHUB_OUTPUT
          echo "m2=$M2" >> $GITHUB_OUTPUT
          echo "m3=$M3" >> $GITHUB_OUTPUT

          gh api repos/${{ github.repository }}/labels \
                -f name="update" \
                -f color="CCCCCC" \
                -f description="Updating a pre-existing section"

  
  init-goal-book:
    runs-on: ubuntu-latest
    needs: [get-milestones]
    env:
      MILESTONE_1: ${{ needs.get-milestones.outputs.milestone1 }}
      MILESTONE_2: ${{ needs.get-milestones.outputs.milestone2 }}
      MILESTONE_3: ${{ needs.get-milestones.outputs.milestone3 }}
    steps:
      - name: Create goal tag
        run: |
          gh api repos/${{ github.repository }}/labels \
                -f name="goal" \
                -f color="CA0020" \
                -f description="Goal-related sections"
      - name: Create G1
        run: |
          # Create the issue and capture its number
          ISSUE_NUMBER=$(gh api repos/${{ github.repository }}/issues \
            -f title="G.1 - Context and Overall objectives" \
            -f body="High-level view of the project: organizational context and reason for building a system. It explains why the project is needed, recalls the business context, and presents the general business objectives" \
            -f milestone="$MILESTONE_1" \
            -F labels[]=goal \
            --jq '.number')

          echo "Created issue #$ISSUE_NUMBER"

  init-system-book:
    runs-on: ubuntu-latest
    needs: [get-milestones]
    env:
      MILESTONE_1: ${{ needs.get-milestones.outputs.milestone1 }}
      MILESTONE_2: ${{ needs.get-milestones.outputs.milestone2 }}
      MILESTONE_3: ${{ needs.get-milestones.outputs.milestone3 }}
    steps:
      - name: Create system tag
        run: |
          gh api repos/${{ github.repository }}/labels \
                -f name="system" \
                -f color="F4A582" \
                -f description="System-related sections"
      - name: Create S1
        run: |
          # Create the issue and capture its number
          ISSUE_NUMBER=$(gh api repos/${{ github.repository }}/issues \
            -f title="S.1 - Components" \
            -f body="Overall structure expressed by the list of major software and, if applicable, hardware parts." \
            -f milestone="$MILESTONE_2" \
            -F labels[]=system \
            --jq '.number')

          echo "Created issue #$ISSUE_NUMBER"

  init-environment-book:
    runs-on: ubuntu-latest
    needs: [get-milestones]
    env:
      MILESTONE_1: ${{ needs.get-milestones.outputs.milestone1 }}
      MILESTONE_2: ${{ needs.get-milestones.outputs.milestone2 }}
      MILESTONE_3: ${{ needs.get-milestones.outputs.milestone3 }}
    steps:
      - name: Create environment tag
        run: |
          gh api repos/${{ github.repository }}/labels \
                -f name="environment" \
                -f color="92C5DE" \
                -f description="Environment-related sections"
      - name: Create E1
        run: |
          # Create the issue and capture its number
          ISSUE_NUMBER=$(gh api repos/${{ github.repository }}/issues \
            -f title="E.1 - Glossary" \
            -f body="Clear and precise definitions of all the vocabulary specific to the application domain, including technical terms, words from ordinary language used in a special meaning, and acronyms. It introduces the terminology of the project; not just of the environment in the strict sense, but of all its parts." \
            -f milestone="$MILESTONE_3" \
            -F labels[]=environment \
            --jq '.number')

          echo "Created issue #$ISSUE_NUMBER"

  init-project-book:
    runs-on: ubuntu-latest
    needs: [get-milestones]
    env:
      MILESTONE_1: ${{ needs.get-milestones.outputs.milestone1 }}
      MILESTONE_2: ${{ needs.get-milestones.outputs.milestone2 }}
      MILESTONE_3: ${{ needs.get-milestones.outputs.milestone3 }}
    steps:
      - name: Create project tag
        run: |
          gh api repos/${{ github.repository }}/labels \
                -f name="project" \
                -f color="0571B0" \
                -f description="Project-related sections"
      - name: Create S1
        run: |
          # Create the issue and capture its number
          ISSUE_NUMBER=$(gh api repos/${{ github.repository }}/issues \
            -f title="P.1 - Roles & Personel" \
            -f body="Main responsibilities in the project; required project staff and their needed qualifications. It defines the roles (as a human responsibility) involved in the project." \
            -f milestone="$MILESTONE_2" \
            -F labels[]=environment \
            -F labels[]=update \
            --jq '.number')

          echo "Created issue #$ISSUE_NUMBER"